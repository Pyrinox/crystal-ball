= CrystalBall Documentation

If you have hundreds of CSVs you need to quickly digest and understand, you can use crystal-ball to help with the onboarding and data exploration phase of your project. You will be able to immediately dive into an expansive data set without getting lost.

== CrystalBall Features
- find specific columns and tables you may be interested in, but may have otherwise not known where to look.
- walk through connections between different csvs, 
- compare and establish foreign key and primary key relationships by using simple boxplots
- dynamically create a master table of useful information while simultaneously recording your step-by-step process for future reference.

== Installation and Usage

[source]
----
pip install crystal-ball
----

You can start using CrystalBall right away by importing it and initializing it with a relative directory containing the CSVs.

[source, python]
----
import crystalball as cb

ball = cb.run("insert relative directory here")
----

== Demo
See a demo of CrystalBall here: link:https://github.com/Pyrinox/crystal-ball/blob/master/demo/tennis_demo/CrystalBall_Demo_Tennis_Matches.ipynb[Exploring Tennis Match Data]

== Methods

Note that all methods that involve searching via keynames are case sensitive.

=== cb.contains(keywords: list, all_colnames: list=None) -> list
Check if keywords exist in all_colnames.

'''

=== cb.featureSearch(keywords: list, all_colnames: list=None) -> list
Find the columns that contain the keywords.

'''

=== cb.tableSearch(keywords: list, csvname_to_colnames_list=None, mode: str='UNION') -> list
Find the tables that contain the keywords.

'''

=== cb.openTable(rel_dir: str, indices: list=[0]) -> DataFrame
Open the csv that is referenced by the given relative directory.

'''

=== cb.subTable(supertable: DataFrame, chosen_index: list, chosen_columns: list) -> DataFrame
Create a subtable from a supertable.

'''

=== cb.mergeTables(tables: list) -> DataFrame
Sequentially merge a list of tables that all share a common index.

'''

=== cb.analyzeRelationships(to_analyze: list, visualize: bool=True) -> DataFrame
Analyze basic stats of one or more different Series.

'''

=== compareRelationship(to_analyze1: Series, to_analyze2: Series, visualize: bool=False) -> DataFrame
Compare and contrast the difference between two Series.

'''

=== cb.export(df_to_export: DataFrame, write_to: str, export_type: str='CSV') -> None
Exports contents of dataframe to relative location specified by write_to arg.

